O custo será o número de comparações

   resolverMochila(int capacidade, List<Objeto> objetos) {						custo		vezes			total
1.    int n = objetos.size();										0
2.    int[][] dp = new int[n + 1][capacidade + 1];							0
3.    for (int i = 1; i <= n; i++) {									1		n			1 * n
4.        Objeto obj = objetos.get(i - 1);								0
5.        for (int w = 0; w <= capacidade; w++) {							1		n*(capacidade+1)	1 * (n*(capacidade+1))
6.            if (obj.peso > w) {									1		n*(capacidade+1)	1 * (n*(capacidade+1))
7.                dp[i][w] = dp[i - 1][w];								0
8.            } else {											0
9.                dp[i][w] = Math.max(dp[i - 1][w], dp[i - 1][w - obj.peso] + obj.valor);}		0
10.           System.out.printf("Subproblema dp[%d][%d] = %d\n", i, w, dp[i][w]);}}			0
11.   int w = capacidade;										0
12.   List<String> itensSelecionados = new ArrayList<>();						0
13.   for (int i = n; i > 0 && w > 0; i--) {								1		n			1 * n
14.       if (dp[i][w] != dp[i - 1][w]) {								1		n			1 * n
15.           Objeto obj = objetos.get(i - 1);								0
16.           itensSelecionados.add(obj.nome);								0
17.           w -= obj.peso;}}										0
18.   System.out.println("Objetos a serem colocados na mochila para maximizar o valor:");		0
19.   for (String nome : itensSelecionados) {								1		n			1 * n
20.       System.out.println("- " + nome);}								0
21.   System.out.println("Valor máximo obtido: " + dp[n][capacidade]);}					0

T(n) = n + n*capacidade + n + n*capacidade + n + n + n + n = 2(n*capacidade) + 6n ----> O(n*c) sendo 'c' a capapacidade